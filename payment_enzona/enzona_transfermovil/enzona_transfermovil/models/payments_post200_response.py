# coding: utf-8

"""
    TransferMovilAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, field_validator
from enzona_transfermovil.models.amount_operations import AmountOperations
from enzona_transfermovil.models.items_operations import ItemsOperations
from enzona_transfermovil.models.links_schema import LinksSchema
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaymentsPost200Response(BaseModel):
    """
    PaymentsPost200Response
    """ # noqa: E501
    transaction_uuid: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    update_at: Optional[datetime] = None
    status_code: Optional[StrictInt] = None
    status_denom: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    invoice_number: Optional[StrictInt] = None
    merchant_op_id: Optional[StrictStr] = None
    terminal_id: Optional[StrictInt] = None
    amount: Optional[AmountOperations] = None
    items: Optional[List[ItemsOperations]] = None
    links: Optional[List[LinksSchema]] = None
    __properties: ClassVar[List[str]] = ["transaction_uuid", "currency", "created_at", "update_at", "status_code", "status_denom", "description", "invoice_number", "merchant_op_id", "terminal_id", "amount", "items", "links"]

    @field_validator('transaction_uuid')
    def transaction_uuid_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('f89c79c8dfbd43939cdc43cf47b1ee47'):
            raise ValueError("must be one of enum values ('f89c79c8dfbd43939cdc43cf47b1ee47')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CUP', 'CUC'):
            raise ValueError("must be one of enum values ('CUP', 'CUC')")
        return value

    @field_validator('status_denom')
    def status_denom_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Pendiente'):
            raise ValueError("must be one of enum values ('Pendiente')")
        return value

    @field_validator('description')
    def description_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Payment description'):
            raise ValueError("must be one of enum values ('Payment description')")
        return value

    @field_validator('merchant_op_id')
    def merchant_op_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('1135'):
            raise ValueError("must be one of enum values ('1135')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaymentsPost200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaymentsPost200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transaction_uuid": obj.get("transaction_uuid"),
            "currency": obj.get("currency"),
            "created_at": obj.get("created_at"),
            "update_at": obj.get("update_at"),
            "status_code": obj.get("status_code"),
            "status_denom": obj.get("status_denom"),
            "description": obj.get("description"),
            "invoice_number": obj.get("invoice_number"),
            "merchant_op_id": obj.get("merchant_op_id"),
            "terminal_id": obj.get("terminal_id"),
            "amount": AmountOperations.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "items": [ItemsOperations.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "links": [LinksSchema.from_dict(_item) for _item in obj.get("links")] if obj.get("links") is not None else None
        })
        return _obj


