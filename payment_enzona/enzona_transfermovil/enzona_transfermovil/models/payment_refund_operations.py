# coding: utf-8

"""
    TransferMovilAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from enzona_transfermovil.models.items_operations import ItemsOperations
from enzona_transfermovil.models.payment_refund_operations_amount import PaymentRefundOperationsAmount
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaymentRefundOperations(BaseModel):
    """
    PaymentRefundOperations
    """ # noqa: E501
    transaction_uuid: Optional[StrictStr] = None
    status_code: Optional[StrictStr] = None
    status_denom: Optional[StrictStr] = None
    transaction_created_at: Optional[StrictStr] = None
    transaction_updated_at: Optional[StrictStr] = None
    transaction_signature: Optional[StrictStr] = None
    amount: Optional[PaymentRefundOperationsAmount] = None
    currency: Optional[StrictStr] = None
    transaction_description: Optional[StrictStr] = None
    transaction_denom: Optional[StrictStr] = None
    transaction_code: Optional[StrictStr] = None
    terminal_id: Optional[StrictStr] = None
    invoice_number: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    lastname: Optional[StrictStr] = None
    avatar: Optional[StrictStr] = None
    items: Optional[List[ItemsOperations]] = None
    __properties: ClassVar[List[str]] = ["transaction_uuid", "status_code", "status_denom", "transaction_created_at", "transaction_updated_at", "transaction_signature", "amount", "currency", "transaction_description", "transaction_denom", "transaction_code", "terminal_id", "invoice_number", "username", "name", "lastname", "avatar", "items"]

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CUP'):
            raise ValueError("must be one of enum values ('CUP')")
        return value

    @field_validator('transaction_denom')
    def transaction_denom_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Devolución Total'):
            raise ValueError("must be one of enum values ('Devolución Total')")
        return value

    @field_validator('transaction_code')
    def transaction_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('2000'):
            raise ValueError("must be one of enum values ('2000')")
        return value

    @field_validator('terminal_id')
    def terminal_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('0.01'):
            raise ValueError("must be one of enum values ('0.01')")
        return value

    @field_validator('invoice_number')
    def invoice_number_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('0.01'):
            raise ValueError("must be one of enum values ('0.01')")
        return value

    @field_validator('username')
    def username_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('dmiller'):
            raise ValueError("must be one of enum values ('dmiller')")
        return value

    @field_validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('David'):
            raise ValueError("must be one of enum values ('David')")
        return value

    @field_validator('lastname')
    def lastname_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Miller'):
            raise ValueError("must be one of enum values ('Miller')")
        return value

    @field_validator('avatar')
    def avatar_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('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'):
            raise ValueError("must be one of enum values ('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')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaymentRefundOperations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaymentRefundOperations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "transaction_uuid": obj.get("transaction_uuid"),
            "status_code": obj.get("status_code"),
            "status_denom": obj.get("status_denom"),
            "transaction_created_at": obj.get("transaction_created_at"),
            "transaction_updated_at": obj.get("transaction_updated_at"),
            "transaction_signature": obj.get("transaction_signature"),
            "amount": PaymentRefundOperationsAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "currency": obj.get("currency"),
            "transaction_description": obj.get("transaction_description"),
            "transaction_denom": obj.get("transaction_denom"),
            "transaction_code": obj.get("transaction_code"),
            "terminal_id": obj.get("terminal_id"),
            "invoice_number": obj.get("invoice_number"),
            "username": obj.get("username"),
            "name": obj.get("name"),
            "lastname": obj.get("lastname"),
            "avatar": obj.get("avatar"),
            "items": [ItemsOperations.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None
        })
        return _obj


