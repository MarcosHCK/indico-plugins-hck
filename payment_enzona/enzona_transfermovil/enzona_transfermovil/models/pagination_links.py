# coding: utf-8

"""
    TransferMovilAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from enzona_transfermovil.models.pagination_links_first_page import PaginationLinksFirstPage
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaginationLinks(BaseModel):
    """
    PaginationLinks
    """ # noqa: E501
    first_page: Optional[PaginationLinksFirstPage] = None
    last_page: Optional[PaginationLinksFirstPage] = None
    next_page: Optional[PaginationLinksFirstPage] = None
    prev_page: Optional[PaginationLinksFirstPage] = None
    __properties: ClassVar[List[str]] = ["first_page", "last_page", "next_page", "prev_page"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaginationLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_page
        if self.first_page:
            _dict['first_page'] = self.first_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_page
        if self.last_page:
            _dict['last_page'] = self.last_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_page
        if self.next_page:
            _dict['next_page'] = self.next_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prev_page
        if self.prev_page:
            _dict['prev_page'] = self.prev_page.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaginationLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_page": PaginationLinksFirstPage.from_dict(obj.get("first_page")) if obj.get("first_page") is not None else None,
            "last_page": PaginationLinksFirstPage.from_dict(obj.get("last_page")) if obj.get("last_page") is not None else None,
            "next_page": PaginationLinksFirstPage.from_dict(obj.get("next_page")) if obj.get("next_page") is not None else None,
            "prev_page": PaginationLinksFirstPage.from_dict(obj.get("prev_page")) if obj.get("prev_page") is not None else None
        })
        return _obj


