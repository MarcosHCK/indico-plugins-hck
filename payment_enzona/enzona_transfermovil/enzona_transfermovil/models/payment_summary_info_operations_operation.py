# coding: utf-8

"""
    TransferMovilAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from enzona_transfermovil.models.payment_summary_info_operations_operation_amount import PaymentSummaryInfoOperationsOperationAmount
from enzona_transfermovil.models.payment_summary_info_operations_operation_bank_debit_details import PaymentSummaryInfoOperationsOperationBankDebitDetails
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaymentSummaryInfoOperationsOperation(BaseModel):
    """
    PaymentSummaryInfoOperationsOperation
    """ # noqa: E501
    amount: Optional[PaymentSummaryInfoOperationsOperationAmount] = None
    bank_debit_details: Optional[PaymentSummaryInfoOperationsOperationBankDebitDetails] = None
    description: Optional[StrictStr] = None
    merchant_op_id: Optional[StrictStr] = None
    invoice_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["amount", "bank_debit_details", "description", "merchant_op_id", "invoice_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaymentSummaryInfoOperationsOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_debit_details
        if self.bank_debit_details:
            _dict['bank_debit_details'] = self.bank_debit_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaymentSummaryInfoOperationsOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": PaymentSummaryInfoOperationsOperationAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "bank_debit_details": PaymentSummaryInfoOperationsOperationBankDebitDetails.from_dict(obj.get("bank_debit_details")) if obj.get("bank_debit_details") is not None else None,
            "description": obj.get("description"),
            "merchant_op_id": obj.get("merchant_op_id"),
            "invoice_id": obj.get("invoice_id")
        })
        return _obj


